import{_ as s,c as a,o as e,a2 as i}from"./chunks/framework.DlC1fzyH.js";const E=JSON.parse('{"title":"Game Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"game_hooks.md","filePath":"game_hooks.md"}'),t={name:"game_hooks.md"},n=i(`<h1 id="game-hooks" tabindex="-1">Game Hooks <a class="header-anchor" href="#game-hooks" aria-label="Permalink to &quot;Game Hooks&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Game Hooks allow you to modify the game&#39;s code without replacing any files.<br> They are done using a patched <code>Assembly-CSharp</code> that contains events for each method in the game. You can get this patched file <a href="https://github.com/Boofii/Blender/blob/main/MMHOOK_Assembly-CSharp.dll" target="_blank" rel="noreferrer">from here</a>.<br> Once installed, you can put it in the <code>BepInEx\\core</code> directory and reference it in your project.</p><h2 id="creating-the-hook" tabindex="-1">Creating the hook <a class="header-anchor" href="#creating-the-hook" aria-label="Permalink to &quot;Creating the hook&quot;">​</a></h2><p>To add a new hook you use <code>On.Type.Method</code> in your mod&#39;s <code>Awake</code> method. For example:</p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Awake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    On.LevelPlayerMotor.DashComplete </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OnDash;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnDash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">On</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LevelPlayerMotor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orig_DashComplete</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> orig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LevelPlayerMotor</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    orig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Executed after the player dashes.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Here, <code>self</code> is the instance of the class you hooked into, and <code>orig</code> is a delegate for the original method.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The hook replaces the method completely, that&#39;s why we call <code>orig(self);</code> to call the original method. You may execute your own code before or after calling <code>orig</code>, depending on your needs.</p></div>`,8),o=[n];function h(l,p,r,k,d,c){return e(),a("div",null,o)}const y=s(t,[["render",h]]);export{E as __pageData,y as default};
